 import pandas as pd
import numpy as np
from keras.api.models import Sequential
from keras.api.layers import Dense
from sklearn.preprocessing import MinMaxScaler
import threading
import time
from collections import deque
import csv
from sklearn.preprocessing import StandardScaler

class AnomalyDetection:
    def __init__(self):
        self.model = None
        self.scaler = MinMaxScaler()
        self.threshold = None
        self.buffer = deque(maxlen=1000)  # Buffer to hold the latest sensor data

    def train_model(self):
        """
        Train the autoencoder model on the data in the buffer.
        """
        # try:
        if len(self.buffer) == 0:
            print("Buffer is empty. Cannot train model.")
            return

        # Extract valid data from buffer using pandas
        # data_list = [entry for entry in self.buffer if len(entry) == 3]
        # df = pd.DataFrame(data_list, columns=['Timestamp', 'Current', 'Speed'])
        # print(f"Training Data Shape: {df.shape}")
        # print(f"Training Data Shape: {df}")
        df = pd.DataFrame(list(self.buffer), columns=['Timestamp', 'Current', 'Speed'])
        if df.empty or df.shape[1] != 3:
            print("No valid data in buffer to train the model.")
            return


        # print(f"Training Data Shape: {df.shape}")  # Debugging

        # Normalize the data
        data_scaled = self.scaler.fit_transform(df[['Current', 'Speed']])
        print(f"Training Data Shape: {data_scaled}")  # Debugging

        # Define Autoencoder model
        input_dim = data_scaled.shape[1]
        self.model = Sequential([
            Dense(64, activation='relu', input_dim=input_dim),
            Dense(32, activation='relu'),
            Dense(64, activation='relu'),
            Dense(input_dim, activation='sigmoid')
        ])
        self.model.compile(optimizer='adam', loss='mse')

        # Train the model
        self.model.fit(data_scaled, data_scaled, epochs=50, batch_size=32, verbose=0)

        # Calculate reconstruction error threshold
        reconstructed = self.model.predict(data_scaled)
        errors = np.mean(np.square(data_scaled - reconstructed), axis=1)
        self.threshold = np.percentile(errors, 95)

        print("Model trained successfully!")
        print(f"Anomaly threshold set at {self.threshold:.4f}")

        # except Exception as e:
        #     print(f"Error during training: {e}")

    def detect_anomaly(self):
        """
        Detect anomalies using the latest data in the buffer.
        """
        if self.model is None:
            print("Model not trained yet!")
            return

        try:
            if len(self.buffer) == 0:
                print("Buffer is empty. Cannot detect anomalies.")
                return

            # Use the last data point in the buffer for detection
            last_data = list(self.buffer)[-1]
            last_data_df = pd.DataFrame([last_data], columns=['Timestamp', 'Current', 'Speed'])

            # Normalize the last data
            last_data_scaled = self.scaler.transform(last_data_df[['Current', 'Speed']])

            # Predict and calculate reconstruction error
            reconstructed = self.model.predict(last_data_scaled)
            error = np.mean(np.square(last_data_scaled - reconstructed), axis=1)[0]

            # Determine anomaly
            is_anomaly = error > self.threshold
            prediction = "Anomaly" if is_anomaly else "Normal"

            print(f"Last Data for Detection: {last_data_df}")
            print(f"Prediction: {prediction}, Reconstruction Error: {error:.4f}, Threshold: {self.threshold:.4f}")

        except Exception as e:
            print(f"Error during anomaly detection: {e}")


# def simulate_data(buffer):
#     """
#     Simulate real-time data generation for current and speed sensors.
#     """
#     try:
#         while True:
#             timestamp = time.time()
#             current = np.random.uniform(10, 20)  # Simulated current sensor value
#             speed = np.random.uniform(50, 100)  # Simulated speed sensor value

#             # Append to the buffer
#             buffer.append([timestamp, current, speed])

#             # Simulate real-time data arrival
#             time.sleep(0.1)
#     except Exception as e:
#         print(f"Error during data simulation: {e}")

def simulate_data(buffer, csv_file, interval=1):
    # Open the CSV file in append mode
    with open(csv_file, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Current", "speed"])  # Header row
        try:
            while True:
                # Generate simulated data
                timestamp = time.time()
                current = np.random.randint(10, 20)  # Simulated current sensor value
                speed = np.random.randint(50, 100)  # Simulated speed sensor value

                # Log data
                data = [timestamp, current, speed]
                # print(f"Simulated Data: {data}")

                # Add data to the buffer
                buffer.append(data)

                # Append data to the CSV file
                writer.writerow(data)
                file.flush()

                time.sleep(interval)
                
        except Exception as e:
            print(f"Error during data simulation: {e}")
            
if __name__ == "__main__":
    csv_file = "C:\\Users\\HazemMohamedHassan\\Desktop\\sensor_data.csv"
    anomaly_detector = AnomalyDetection()

    # Start data simulation in a separate thread
    data_thread = threading.Thread(target=simulate_data, args=(anomaly_detector.buffer, csv_file))
    data_thread.daemon = True
    data_thread.start()

    while True:
        command = input("Enter command ('learn', 'detect', 'exit'): ").strip().lower()
        if command == "learn":
            anomaly_detector.buffer.clear()
            print("Cleared buffer. Waiting to refill for training...")
            while len(anomaly_detector.buffer) < 1000:
                time.sleep(0.1)  # Wait until buffer is refilled
            anomaly_detector.train_model()
        elif command == "detect":
            while True:
                anomaly_detector.detect_anomaly()
                time.sleep(1)  # Check for anomalies every second
        elif command == "exit":
            print("Exiting program.")
            break
        else:
            print("Invalid command. Try 'learn', 'detect', or 'exit'.")